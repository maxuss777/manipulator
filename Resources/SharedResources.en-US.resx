<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="&lt;strong&gt;Clients are satisfied&lt;/strong&gt; with cooperation with us." xml:space="preserve">
    <value>&lt;strong&gt;Clients are satisfied&lt;/strong&gt; with cooperation with us.</value>
  </data>
  <data name="&lt;strong&gt;Projects&lt;/strong&gt; completed in advance or on time." xml:space="preserve">
    <value>&lt;strong&gt;Projects&lt;/strong&gt; completed in advance or on time.</value>
  </data>
  <data name="&lt;strong&gt;Years&lt;/strong&gt; we have been working for you for." xml:space="preserve">
    <value>&lt;strong&gt;Years&lt;/strong&gt; we have been working for you.</value>
  </data>
  <data name="About Us" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="Accuracy in work. You can easily cope with any tasks. If necessary, experienced drivers of our company will provide you with assistance." xml:space="preserve">
    <value>Accuracy in work. You can easily cope with any tasks. If necessary, experienced drivers of our company will provide you with assistance.</value>
  </data>
  <data name="Any form of payment" xml:space="preserve">
    <value>Any form of payment</value>
  </data>
  <data name="Ask a question" xml:space="preserve">
    <value>Ask a question</value>
  </data>
  <data name="Ask a question to a professional and get an answer as soon as possible" xml:space="preserve">
    <value>Ask a question to a professional and get an answer as soon as possible.</value>
  </data>
  <data name="Body length" xml:space="preserve">
    <value>Body length - {0} meters</value>
  </data>
  <data name="Contact us" xml:space="preserve">
    <value>Contact us</value>
  </data>
  <data name="Contacts" xml:space="preserve">
    <value>Contacts</value>
  </data>
  <data name="Digging depth" xml:space="preserve">
    <value>Digging depth {0} meters</value>
  </data>
  <data name="Ease of work. The proposed manipulators do not require complex installation. Contact us if you want all tasks to be solved quickly and efficiently." xml:space="preserve">
    <value>Ease of work. The proposed manipulators do not require complex installation. Contact us if you want all tasks to be solved quickly and efficiently.</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailSendError" xml:space="preserve">
    <value>Sorry, something went wrong. Could you please try again later?</value>
  </data>
  <data name="EmailSendSuccess" xml:space="preserve">
    <value>Your message has been sent. Thank you!</value>
  </data>
  <data name="Equipment" xml:space="preserve">
    <value>Equipment</value>
  </data>
  <data name="Flexible discounts system" xml:space="preserve">
    <value>Flexible discounts system</value>
  </data>
  <data name="High qualified staff" xml:space="preserve">
    <value>High qualified staff</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="Looking for heavy equipment in Kharkiv?" xml:space="preserve">
    <value>Looking for heavy equipment in Kharkiv?</value>
  </data>
  <data name="Manipulator title" xml:space="preserve">
    <value>Manipulator {0} tons</value>
  </data>
  <data name="Many years of experience and incredible clients" xml:space="preserve">
    <value>Many years of experience and incredible clients</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Mini Tractor" xml:space="preserve">
    <value>Mini Tractor</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Need advice?" xml:space="preserve">
    <value>Need advice?</value>
  </data>
  <data name="Our Equipment" xml:space="preserve">
    <value>Our Equipment</value>
  </data>
  <data name="Our portfolio" xml:space="preserve">
    <value>Our portfolio</value>
  </data>
  <data name="Our Services" xml:space="preserve">
    <value>Our Services</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Portfolio" xml:space="preserve">
    <value>Portfolio</value>
  </data>
  <data name="Renting equipment with a manipulator from our company is profitable and convenient. Renting this equipment will help you save money and time." xml:space="preserve">
    <value>Renting equipment with a manipulator from our company is profitable and convenient. Renting this equipment will help you save money and time.</value>
  </data>
  <data name="Safety of use. The machine with a manipulator, which can be rented now, is completely ready for operation. We regularly carry out technical maintenance of the entire fleet, protecting you from injuries." xml:space="preserve">
    <value>Safety of use. The machine with a manipulator, which can be rented now, is completely ready for operation. We regularly carry out technical maintenance of the entire fleet, protecting you from injuries.</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Services" xml:space="preserve">
    <value>Services</value>
  </data>
  <data name="Smart solutions with" xml:space="preserve">
    <value>Smart solutions with</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="The carrying capacity of the board is" xml:space="preserve">
    <value>The carrying capacity of the board is {0} tons</value>
  </data>
  <data name="We are a team of talented carriers" xml:space="preserve">
    <value>We are a team of talented carriers.</value>
  </data>
  <data name="We are grateful to every client for their cooperation with us, and we express it in hard work and full commitment" xml:space="preserve">
    <value>We are grateful to every client for their cooperation with us, and we express it in hard work and full commitment</value>
  </data>
  <data name="We offer popular equipment of foreign manufacturers, which is characterized by high reliability and good operation for a long time." xml:space="preserve">
    <value>We offer popular equipment of foreign manufacturers, which is characterized by high reliability and good operation for a long time.</value>
  </data>
  <data name="We work without days off" xml:space="preserve">
    <value>We work without days off</value>
  </data>
</root>